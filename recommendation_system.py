# -*- coding: utf-8 -*-
"""recommendation-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dOigHOY_Mm2tNsTJzRORi6Yq70Zs5To5
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

movies_data = pd.read_csv('/content/movies.csv')

# Selecting relevant features
selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']

print(movies_data.columns)

for feature in selected_features:
    if feature in movies_data.columns:  # Check if the column exists before filling missing values
        movies_data[feature] = movies_data[feature].fillna('')

for feature in selected_features:
    if feature not in movies_data.columns:
        print(f"Warning: Column '{feature}' not found in the DataFrame.")

# Fill missing values in existing columns
for feature in selected_features:
    if feature in movies_data.columns:
        movies_data[feature] = movies_data[feature].fillna('')

# Combine features (only if they exist)
combined_features_list = [] # Initialize as a list
for feature in selected_features:
    if feature in movies_data.columns:
        combined_features_list.append(movies_data[feature]) # Append each Series to the list

# Combine the Series in the list into a single Series
combined_features_series = pd.concat(combined_features_list, axis=0)

# Convert the combined Series to a string, then strip
combined_features_string = combined_features_series.astype(str).str.cat(sep=' ').strip()

print(combined_features_string)

vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)

similarity = cosine_similarity(feature_vectors)

similarity = cosine_similarity(feature_vectors)

# Function to recommend movies
def recommend(movie_name):
    list_of_all_titles = movies_data['title'].tolist()
    find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

    if find_close_match:
        close_match = find_close_match[0]
        index_of_the_movie = movies_data[movies_data.title == close_match].index[0]
        similarity_score = list(enumerate(similarity[index_of_the_movie]))
        sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)

        print('Movies suggested for you:')
        for i, movie in enumerate(sorted_similar_movies[1:6], 1):
            similar_movie_title = movies_data.iloc[movie[0]]['title']
            print(f"{i}. {similar_movie_title}")
    else:
        print("No close match found for the given movie name.")

# Example usage
recommend('interstellar')